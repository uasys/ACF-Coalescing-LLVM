#!/usr/bin/python
import argparse
import subprocess
import sys
import glob, os
import os.path
import datetime

parser = argparse.ArgumentParser()
parser.add_argument("files", metavar='File', nargs='+')
parser.add_argument("-D", dest='debugs', nargs='+')
parser.add_argument("-I", dest='includes', nargs='+')
parser.add_argument("-l", dest='libs', nargs='+')
parser.add_argument("-O", dest='opt')
parser.add_argument("-L", dest='libdir')
parser.add_argument("-g", dest='debug', action='store_true')
parser.add_argument("-G", dest='Debug', action='store_true')
parser.add_argument("-o", dest='output')
parser.add_argument("-arch", dest='arch')
parser.add_argument("-fopenmp", dest='omp', action='store_true')
parser.add_argument("-m", dest='bitwidth')
parser.add_argument("-X", dest='passthrough')
parser.add_argument("-cuda", dest='cuda', action='store_true')
parser.add_argument("-use-fast-math", dest='ufm', action='store_true')
parser.add_argument("-use_fast_math", dest='ufm2', action='store_true')
parser.add_argument("-c", dest='compile', action='store_true')
parser.add_argument("-v", dest='verbose', action='store_true')

args = parser.parse_args()

def eprint(string):
  print >> sys.stderr, string

if not args.includes:
  args.includes = []

compile = "clang -S -emit-llvm -g" + "".join([" -I"+inc for inc in args.includes])
if(args.omp):
  compile += " -fopenmp"

if(args.debugs):
  compile += " " + "".join([" -D"+d for d in args.debugs])

if(args.ufm or args.ufm2):
  pass
  #compile += "-I "

compile += " " + " ".join(args.files)

if args.verbose:
  print(compile)
retcode = subprocess.call(compile, shell=True)
if(retcode != 0):
  sys.exit(0)

bitcode = []
for root, dirs, files in os.walk("."):
  for f in files:
    if f.endswith("sm_20.ll"):
      bitcode.append(os.path.join(root, f))


llvmlink = "llvm-link -o gpucheck.bc " + " ".join(bitcode)
if args.verbose:
  print llvmlink
retcode = subprocess.call(llvmlink, shell=True)
if(retcode != 0):
  sys.exit(0)

gpucheck = "opt -load /home/taylor/git/coalescingsa-llvm/nvgpu/libGpuAnalysis.so gpucheck.bc -o /tmp/out"
if args.verbose:
  print("Build complete, Running GPU-Check");
eprint("Memory Coalescing Issues:");
retcode = subprocess.call(gpucheck + " -coalesce", shell=True)
if(retcode != 0):
  sys.exit(0)
eprint("Divergence Issues:");
retcode = subprocess.call(gpucheck + " -bdiverge", shell=True)
if(retcode != 0):
  sys.exit(0)
eprint("GPU-Check ran successfully");

start = datetime.datetime.now()
retcode = subprocess.call(gpucheck + " -bdiverge -coalesce", shell=True)
end = datetime.datetime.now()
delta = end - start
eprint("Start Exec Time")
eprint(delta.total_seconds())
eprint("End Exec Time")
delta = end - start
